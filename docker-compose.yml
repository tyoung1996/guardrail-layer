services:
  frontend:
    build: ./frontend
    container_name: guardrail-frontend
    restart: always
    env_file:
      - ./frontend/.env
    ports:
      - "8081:80"
    depends_on:
      - backend

  backend:
    build: ./backend
    container_name: guardrail-backend
    restart: always
    env_file:
      - ./backend/.env
    environment:
      - GUARDRAILS_DB_URL=postgresql://postgres:postgres@guardrail-db:5432/guardrails
    ports:
      - "8080:8080"
    depends_on:
      guardrail-db:
        condition: service_healthy
      guardrail-demo-db:
        condition: service_healthy
    command: >
      sh -c "npx prisma generate && npx prisma migrate deploy && node dist/index.js"

  guardrail-db:
    image: postgres:15
    container_name: guardrail-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: guardrails
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - guardrail_data:/var/lib/postgresql/data

  guardrail-demo-db:
    image: postgres:15
    container_name: guardrail-demo-db
    restart: always
    environment:
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: demo
      POSTGRES_DB: guardrail_demo
    ports:
      - "5434:5432"
    volumes:
      - ./demo-data/init-demo.sql:/docker-entrypoint-initdb.d/init-demo.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demo -d guardrail_demo"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  guardrail_data:
  demo_data: